import mongodb from 'mongodb';

const { MongoClient } = mongodb;
let client;
const models = {};
export const connection = { readyState: 0, name: null };
export const version = '0.0.0-stub';

export async function connect(uri, options = {}) {
  client = new MongoClient(uri, options);
  await client.connect();
  connection.readyState = 1;
  try { connection.name = client.db().databaseName; } catch { connection.name = null; }
  return client;
}

export class Schema {
  constructor(definition) {
    this.definition = definition;
  }
}

export function model(name, schema) {
  if (models[name]) return models[name];
  const collectionName = name.toLowerCase();
  const m = {
    create: (doc) => {
      if (!client) throw new Error('MongoClient not connected');
      const collection = client.db().collection(collectionName);
      return collection.insertOne(doc);
    },
    findOneAndUpdate: (filter, update) => {
      if (!client) throw new Error('MongoClient not connected');
      const collection = client.db().collection(collectionName);
      return collection.findOneAndUpdate(filter, { $set: update });
    }
  };
  models[name] = m;
  return m;
}

export function modelNames() {
  return Object.keys(models);
}

export const modelsRegistry = models;

export default { connect, Schema, model, models: modelsRegistry, modelNames, connection, version };
