const express = require("express");
const router = express.Router();
const axios = require("axios");

const {
  BAMBOO_CLIENT_ID,
  BAMBOO_CLIENT_SECRET,
  BAMBOO_BASE_URL
} = process.env;

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ (OAuth2 Client Credentials Flow)
async function getAccessToken() {
  const url = `${BAMBOO_BASE_URL}/oauth/token`;
  console.log("üîê –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑:", url);

  const response = await axios.post(
    url,
    {
      client_id: BAMBOO_CLIENT_ID,
      client_secret: BAMBOO_CLIENT_SECRET,
      grant_type: "client_credentials"
    },
    {
      headers: {
        "Content-Type": "application/json"
      }
    }
  );

  console.log("‚úÖ Bamboo —Ç–æ–∫–µ–Ω –æ—Ç—Ä–∏–º–∞–Ω–æ");
  return response.data.access_token;
}

// –ó–∞–ø–∏—Ç –Ω–∞ –∫–∞—Ç–∞–ª–æ–≥
router.get("/", async (req, res) => {
  try {
    const token = await getAccessToken();

    const url = `${BAMBOO_BASE_URL}/v2/catalogs`;
    console.log("üì¶ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–∞—Ç–∞–ª–æ–≥—É –∑:", url);

    const response = await axios.get(url, {
      headers: {
        Authorization: `Bearer ${token}`,
        Accept: "application/json"
      }
    });

    console.log("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –æ—Ç—Ä–∏–º–∞–Ω–æ:", Array.isArray(response.data) ? response.data.length : "–æ–±'—î–∫—Ç");

    res.json(response.data);
  } catch (error) {
    console.error("‚ùå Bamboo fetch error:", error.response?.data || error.message);
    res.status(error.response?.status || 500).json({
      error: "Failed to fetch products from Bamboo"
    });
  }
});

module.exports = router;




