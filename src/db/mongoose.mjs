// src/db/mongoose.mjs
// –†–æ–±–∏–º–æ —Å—É–º—ñ—Å–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è –±—É–¥—å-—è–∫–æ–≥–æ –±–∞–Ω–¥–ª—ñ–Ω–≥—É (ESM/CJS)
import * as M from "mongoose";

// –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä–µ–∞–ª—å–Ω–∏–π —ñ–Ω—Å—Ç–∞–Ω—Å mongoose
const mg = (M?.default && (M.default.connect || M.default.set))
  ? M.default
  : M;

// –°—ñ–Ω–≥–ª—Ç–æ–Ω-—Ñ–ª–∞–≥ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
let connected = false;

export function getMongoose() {
  return mg;
}

export async function connectMongo() {
  if (connected) return mg;

  const uri =
    process.env.DB_URL ||
    process.env.MONGODB_URI ||
    process.env.DB_URI;

  // üëá –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–∑–≤–∞ –ë–î: digi (—è–∫ –≤ Atlas)
  const dbName = process.env.DB_NAME || "digi";

  if (!uri) {
    console.warn("Mongo URI not set (DB_URL / MONGODB_URI / DB_URI). Skipping connect.");
    return mg;
  }

  try { mg.set?.("strictQuery", true); } catch {}

  await mg.connect(uri, { dbName });

  connected = true;

  // üëá –∫–æ—Ä–µ–∫—Ç–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ –ë–î –≤ —Ä—ñ–∑–Ω–∏—Ö –≤–µ—Ä—Å—ñ—è—Ö Mongoose/–¥—Ä–∞–π–≤–µ—Ä–∞
  const name =
    mg.connection?.name ||
    mg.connection?.db?.databaseName ||
    dbName;

  console.log("‚úÖ Mongo connected:", name);
  return mg;
}
